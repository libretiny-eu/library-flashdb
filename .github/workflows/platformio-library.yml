name: Deploy PlatformIO library

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Upstream ref
        required: false
        default: ''
      version:
        description: Package version
        required: false
        default: ''

permissions:
  contents: write

jobs:
  deploy:
    name: Deploy PlatformIO library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout upstream
        uses: actions/checkout@v3
        with:
          repository: armink/FlashDB
          ref: ${{ inputs.ref }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: actions

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Generate version number
        id: version
        run: |
          echo version=$(date -d $(git log -1 --format=%cs) +%Y.%-m.%-d) >> $GITHUB_OUTPUT

      - name: Write package.json and library.json
        run: |
          cp actions/package.json .
          cp actions/library.json .
          sed -i s/VERSION/${{ inputs.version || steps.version.outputs.version }}/g package.json library.json
          rm -rf actions/

      - name: Cleanup repository
        run: |
          git checkout -B platformio
          mv inc/fdb_cfg.h inc/fdb_cfg.h.example
          touch inc/fdb_cfg.h
          rm -rf .github/
          rm -rf demos/
          rm -rf docs/
          rm -rf port/fal/docs/
          rm -rf port/fal/samples/
          rm -rf samples/
          rm -rf tests/

      - name: Commit and push changes
        env:
          version: ${{ inputs.version || steps.version.outputs.version }}
        run: |
          git config --global user.email "gh-actions@libretiny.eu"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "[${{ env.version }}] Prepare PlatformIO package"
          git tag ${{ env.version }}
          git remote set-url origin https://github.com/${{ github.repository }}
          git push --force origin platformio
          git push origin ${{ env.version }}

      - name: Publish PlatformIO library
        env:
          CI: true
          PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
        run: |
          rm package.json
          platformio pkg publish --non-interactive --type library
